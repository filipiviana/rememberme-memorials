
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { ArrowLeft } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { Memorial, AudioFile } from '../types/memorial';
import MemorialLogo from './MemorialLogo';
import FileUpload from './FileUpload';
import GalleryUpload from './GalleryUpload';
import AudioUpload from './AudioUpload';

interface CreateMemorialFormProps {
  onSubmit: (memorial: Memorial) => void;
  onCancel: () => void;
}

const CreateMemorialForm = ({ onSubmit, onCancel }: CreateMemorialFormProps) => {
  const [formData, setFormData] = useState({
    name: '',
    birthDate: '',
    deathDate: '',
    tribute: '',
    biography: '',
    profilePhoto: '',
    coverPhoto: ''
  });

  const [photos, setPhotos] = useState<string[]>([]);
  const [videos, setVideos] = useState<string[]>([]);
  const [audios, setAudios] = useState<AudioFile[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name || !formData.birthDate || !formData.deathDate) {
      toast({
        title: "Campos obrigatórios",
        description: "Preencha nome, data de nascimento e falecimento",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);

    const memorial: Memorial = {
      id: '', // Will be generated by database
      name: formData.name,
      birthDate: formData.birthDate,
      deathDate: formData.deathDate,
      tribute: formData.tribute,
      biography: formData.biography,
      profilePhoto: formData.profilePhoto || 'https://images.unsplash.com/photo-1494790108755-2616b612b788?w=400',
      coverPhoto: formData.coverPhoto || 'https://images.unsplash.com/photo-1501854140801-50d01698950b?w=800',
      photos,
      videos,
      audios,
      slug: '', // Will be generated by database function
      isPublished: false, // Default to not published
      createdAt: '' // Will be set by database
    };

    await onSubmit(memorial);
    setIsSubmitting(false);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <Button variant="ghost" onClick={onCancel}>
                <ArrowLeft className="h-4 w-4 mr-2" />
                Voltar
              </Button>
              <MemorialLogo />
            </div>
          </div>
        </div>
      </header>

      {/* Form */}
      <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <Card>
          <CardHeader>
            <CardTitle>Criar Novo Memorial</CardTitle>
            <CardDescription>
              Preencha as informações para criar uma página memorial personalizada
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Informações Básicas */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="name">Nome Completo *</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="Digite o nome completo"
                    required
                    disabled={isSubmitting}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="tribute">Frase de Homenagem</Label>
                  <Input
                    id="tribute"
                    value={formData.tribute}
                    onChange={(e) => setFormData(prev => ({ ...prev, tribute: e.target.value }))}
                    placeholder="Uma frase especial em memória"
                    disabled={isSubmitting}
                  />
                </div>
              </div>

              {/* Datas */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="birthDate">Data de Nascimento *</Label>
                  <Input
                    id="birthDate"
                    type="date"
                    value={formData.birthDate}
                    onChange={(e) => setFormData(prev => ({ ...prev, birthDate: e.target.value }))}
                    required
                    disabled={isSubmitting}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="deathDate">Data de Falecimento *</Label>
                  <Input
                    id="deathDate"
                    type="date"
                    value={formData.deathDate}
                    onChange={(e) => setFormData(prev => ({ ...prev, deathDate: e.target.value }))}
                    required
                    disabled={isSubmitting}
                  />
                </div>
              </div>

              {/* Upload de Imagens */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FileUpload
                  label="Foto de Perfil"
                  accept="image/*"
                  onUpload={(url) => setFormData(prev => ({ ...prev, profilePhoto: url }))}
                  currentFile={formData.profilePhoto}
                />
                <FileUpload
                  label="Foto de Capa"
                  accept="image/*"
                  onUpload={(url) => setFormData(prev => ({ ...prev, coverPhoto: url }))}
                  currentFile={formData.coverPhoto}
                />
              </div>

              {/* Biografia */}
              <div className="space-y-2">
                <Label htmlFor="biography">Biografia</Label>
                <Textarea
                  id="biography"
                  value={formData.biography}
                  onChange={(e) => setFormData(prev => ({ ...prev, biography: e.target.value }))}
                  placeholder="Conte a história de vida desta pessoa especial..."
                  rows={4}
                  disabled={isSubmitting}
                />
              </div>

              {/* Galeria de Fotos */}
              <GalleryUpload
                photos={photos}
                onPhotosChange={setPhotos}
              />

              {/* Upload de Áudio */}
              <AudioUpload
                audios={audios}
                onAudiosChange={setAudios}
              />

              {/* Botões de Ação */}
              <div className="flex justify-end space-x-4">
                <Button type="button" variant="outline" onClick={onCancel} disabled={isSubmitting}>
                  Cancelar
                </Button>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting ? 'Criando...' : 'Criar Memorial'}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </main>
    </div>
  );
};

export default CreateMemorialForm;
